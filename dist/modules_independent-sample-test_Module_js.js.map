{"version":3,"file":"modules_independent-sample-test_Module_js.js","mappings":";;;;;;;;;;;;;;;;;;AAA8C;AACI;AACJ;AACO;AACzB;AAC5B;AACe,qBAAqB,+DAAc;AAClD;AACA;AACA,oBAAoB,uDAAG;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E;AAC5E,0EAA0E;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,qEAA4B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,2EAA6B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,kBAAkB,wCAAwC,SAAS;AACnG;AACA,+BAA+B,kBAAkB,OAAO,sBAAsB;AAC9E,4BAA4B,kBAAkB;AAC9C;AACA;AACA;AACA;AACA;AACA,8EAA8E,SAAS;AACvF,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,kFAAoC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,KAAK;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,SAAS,uCAAuC,SAAS;AACxG;AACA;AACA;AACA;AACA;AACA;AACA,mGAAmG,UAAU,iGAAiG,SAAS;AACvN;AACA;AACA;AACA;AACA,mGAAmG,UAAU,qGAAqG,SAAS;AAC3N;AACA;AACA;AACA;AACA,mGAAmG,UAAU,0FAA0F,SAAS;AAChN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mIAAmI,SAAS,mEAAmE,SAAS;AACxN;AACA;AACA;AACA,mIAAmI,SAAS,oEAAoE,SAAS;AACzN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8EAA8E;AAC9E,mIAAmI,SAAS,+EAA+E,SAAS;AACpO;AACA;AACA,+EAA+E;AAC/E,mIAAmI,SAAS,+EAA+E,SAAS;AACpO;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2GAA2G,SAAS;AACpH;AACA,uEAAuE,SAAS;AAChF;AACA;AACA;AACA,2GAA2G,SAAS;AACpH;AACA,uEAAuE,SAAS;AAChF;AACA;AACA;AACA,2GAA2G,SAAS;AACpH;AACA,uEAAuE,SAAS;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2GAA2G,SAAS;AACpH;AACA,uEAAuE,SAAS;AAChF;AACA;AACA;AACA,2GAA2G,SAAS;AACpH;AACA,uEAAuE,SAAS;AAChF,uEAAuE;AACvE;AACA;AACA,2GAA2G,SAAS;AACpH;AACA,uEAAuE,SAAS;AAChF,sEAAsE;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,iFAAmC;AACjE,8BAA8B,kFAAoC;AAClE,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,6DAAe;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE,gEAAkB;AAC3F,mDAAmD,kEAAoB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE,6DAAe;AACxF,mDAAmD,+DAAiB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE,4BAA4B;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,wGAAwG,+BAA+B;AACvI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA,kCAAkC;AAClC;AACA;AACA,kCAAkC;AAClC;AACA;AACA,kCAAkC;AAClC;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA,sCAAsC;AACtC;AACA;AACA,sCAAsC;AACtC;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA,kCAAkC;AAClC;AACA;AACA,kCAAkC;AAClC;AACA;AACA,kCAAkC;AAClC;AACA;AACA,kCAAkC;AAClC;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA,sCAAsC,KAAK;AAC3C;AACA,cAAc;AACd;AACA,iBAAiB,gCAAgC;AACjD,cAAc;AACd;AACA,kCAAkC,6DAA6D;AAC/F;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack:///./modules/independent-sample-test/Module.js"],"sourcesContent":["import img from './img/moduleIndependent.png';\r\nimport ModuleIntegrator from '@/ModuleIntegrator';\r\nimport DataControls from '@data/DataControls';\r\nimport AbstractModule from '@modules/AbstractModule';\r\nimport Var from '@data/Var';\r\n\r\nexport default class Module extends AbstractModule {\r\n\r\n    static #name = 'Сравнение независимых выборок';\r\n    static #image = img;\r\n    static #moduleTypeId = null;\r\n    static testText = {\r\n        'fisher': 'Точный тест Фишера',\r\n        'mann': 'Тест Манна-Уитни',\r\n        'student': 'Независимый тест Стьюдента'\r\n    }\r\n    static altHypText = {\r\n        'both': 'Двусторонняя проверка альтернативной гипотезы (M2 ≠ M1)',\r\n        'right': 'Правосторонняя проверка альтернативной гипотезы (M2 &#62; M1)',\r\n        'left': 'Левосторонняя проверка альтернативной гипотезы (M2 &#60; M1)',\r\n\r\n    }\r\n    #id;\r\n    #data = {\r\n        first: undefined,\r\n        second: undefined\r\n    }\r\n    #power;\r\n    #resultsTableData = {\r\n        z: undefined,\r\n        student: {\r\n            d: undefined,\r\n            sd: undefined,\r\n        },\r\n        fisher: {\r\n            p0: undefined,\r\n            p1: undefined,\r\n            p2: undefined,\r\n        }\r\n    }\r\n    #testType;\r\n    #inputType;\r\n    #altHypTest;\r\n    #vars = {\r\n        first: undefined,\r\n        second: undefined\r\n    }\r\n\r\n    #hypName;\r\n    #element\r\n    #form;\r\n    #formSheets = [];\r\n    #sheetSelects = [];\r\n    #tableData = {\r\n        pair: undefined,\r\n        indepTable: undefined,\r\n        depTable: undefined\r\n    };\r\n    #resultBlock;\r\n\r\n    constructor(id, reference = null) {\r\n        super();\r\n        this.#id = id;\r\n\r\n        if (reference) {\r\n            this.#makeCopy(reference);\r\n        }\r\n    }\r\n\r\n    static setModuleTypeId(id) {\r\n        Module.#moduleTypeId = id;\r\n    }\r\n\r\n    static getModuleTypeId() {\r\n        return Module.#moduleTypeId;\r\n    }\r\n\r\n    static getName() {\r\n        return Module.#name;\r\n    }\r\n\r\n    static getImage() {\r\n        return Module.#image;\r\n    }\r\n\r\n    deleteSelf() {\r\n        UIControls.parametersContainer.removeChild(this.#element);\r\n        UIControls.resultsContainer.removeChild(this.#resultBlock);\r\n    }\r\n\r\n    #makeCopy(reference) {\r\n        const refData = reference.getAllData();\r\n        this.#data = refData.data;\r\n        this.#power = refData.power;\r\n        this.#resultsTableData = refData.resultsTableData;\r\n        this.#testType = refData.testType;\r\n        this.#inputType = refData.inputType;\r\n        this.#altHypTest = refData.altHypTest;\r\n        this.#vars = refData.vars;\r\n        this.#hypName = refData.hypName;\r\n\r\n        const parametersContainer = UIControls.parametersContainer;\r\n        const resultsContainer = UIControls.resultsContainer;\r\n        const newHyp = refData.element.cloneNode(true);\r\n        const newRes = document.createElement('div');\r\n        newRes.classList.add('results__block');\r\n\r\n        this.#setElements(newHyp, newRes);\r\n\r\n        const optFormEl = this.#element.querySelector('#module-option-form_' + refData.id)\r\n        optFormEl.setAttribute('id', 'module-option-form_' + this.#id);\r\n        optFormEl.dataset.id = this.#id;\r\n        [...this.#element.querySelectorAll('.form-change-trigger_' + refData.id)].forEach(el => {\r\n            el.classList.replace('form-change-trigger_' + refData.id, 'form-change-trigger_' + this.#id);\r\n            el.setAttribute('form', 'module-option-form_' + this.#id);\r\n        });\r\n        UIControls.parametersContainer.insertBefore(this.#element, refData.element.nextElementSibling);\r\n        UIControls.resultsContainer.insertBefore(this.#resultBlock, refData.resultBlock.nextElementSibling);\r\n    }\r\n\r\n    getAllData() {\r\n        const data = {};\r\n        data.id = this.#id;\r\n        data.data = Object.assign({}, this.#data);\r\n        data.power = this.#power;\r\n        data.resultsTableData = Object.deepCopy(this.#resultsTableData);\r\n        data.testType = this.#testType;\r\n        data.inputType = this.#inputType;\r\n        data.altHypTest = this.#altHypTest;\r\n        data.vars = Object.assign({}, this.#vars);\r\n        data.hypName = this.#hypName;\r\n        data.element = this.#element;\r\n        data.resultBlock = this.#resultBlock;\r\n        return data;\r\n    }\r\n\r\n    setName(name) {\r\n        this.#hypName = name;\r\n        this.#element.querySelector('.parameters__title').textContent = name;\r\n        this.#resultBlock.querySelector('.results__header').textContent = name;\r\n    }\r\n\r\n    setId(id) {\r\n        const oldId = this.#id;\r\n        const optFormEl = this.#element.querySelector('#module-option-form_' + oldId)\r\n        optFormEl.setAttribute('id', 'module-option-form_' + id);\r\n        optFormEl.dataset.id = id;\r\n        [...this.#element.querySelectorAll('.form-change-trigger_' + oldId)].forEach(el => {\r\n            el.classList.replace('form-change-trigger_' + oldId, 'form-change-trigger_' + id);\r\n            el.setAttribute('form', 'module-option-form_' + id);\r\n        });\r\n        this.#id = id;\r\n    }\r\n\r\n    getName() {\r\n        return this.#hypName;\r\n    }\r\n\r\n    getElement() {\r\n        return this.#element;\r\n    }\r\n\r\n    getFormSheets() {\r\n        return this.#formSheets;\r\n    }\r\n\r\n    getSheetSelects() {\r\n        return this.#sheetSelects;\r\n    }\r\n\r\n    addListeners(element) {\r\n        const tableTwo = element.querySelector('.two-column-var');\r\n        const switch0 = tableTwo.querySelector('.switch-button');\r\n        const firstTable = tableTwo.querySelector('.two-column-var__table-body');\r\n        const tableData = tableTwo.querySelector('.target-table-data');\r\n\r\n        const tableGroup = element.querySelector('.grouping-var');\r\n        const [switch1, switch2] = [...tableGroup.querySelectorAll('.switch-button')];\r\n        const leftTable = element.querySelector('.grouping-var__table-body');\r\n        const depTable = element.querySelector('.grouping-var__dependent-table-body');\r\n        const indepTable = element.querySelector('.grouping-var__independent-table-body');\r\n\r\n        const insertChild = (item, toTable) => {\r\n            const nextChild = toTable.querySelector('.var-table__anchor_' + item.dataset.varId);\r\n            if (nextChild) {\r\n                toTable.insertBefore(item, nextChild);\r\n            }\r\n        }\r\n\r\n        const callSettings = () => {\r\n            if ((depTable.firstElementChild && indepTable.firstElementChild) || tableData.children.length === 2) {\r\n                ModuleIntegrator.setSettings(this.#id);\r\n            }\r\n        }\r\n\r\n        const swapItem = function (firstTable, secondTable, maxItemsInSecondTable) {\r\n            const checkedInput = firstTable.querySelector('input:checked') || secondTable.querySelector('input:checked');\r\n            if (!checkedInput)\r\n                return;\r\n            const checkedItem = checkedInput.parentElement;\r\n            const parentOfItem = checkedItem.parentElement;\r\n            if (parentOfItem.isSameNode(secondTable)) {\r\n                parentOfItem.removeChild(checkedItem);\r\n                insertChild(checkedItem, firstTable);\r\n            }\r\n            else {\r\n                if (secondTable.children.length === maxItemsInSecondTable) {\r\n                    return;\r\n                }\r\n                parentOfItem.removeChild(checkedItem);\r\n                secondTable.appendChild(checkedItem);\r\n            }\r\n\r\n            callSettings();\r\n        }\r\n\r\n        switch0.addEventListener('click', swapItem.bind(this, firstTable, tableData, 2));\r\n        switch1.addEventListener('click', swapItem.bind(this, leftTable, depTable, 1));\r\n        switch2.addEventListener('click', swapItem.bind(this, leftTable, indepTable, 1));\r\n\r\n    }\r\n\r\n    displayVarsOfSheet(sheetId, type) {\r\n        const vars = DataControls.getVarsBySheetId(sheetId);\r\n        if (!vars)\r\n            return;\r\n\r\n        let tableBody;\r\n        let arrOfIds = [];\r\n\r\n        if (type === 'two-column-var') {\r\n            tableBody = this.#element.querySelector('.two-column-var__table-body');\r\n            const tableSecondItem = this.#tableData.pair;\r\n            arrOfIds.push(tableSecondItem.firstElementChild?.dataset.varId);\r\n            arrOfIds.push(tableSecondItem.lastElementChild?.dataset.varId);\r\n            tableBody.innerHTML = createElementsStr();\r\n        }\r\n        else if (type === 'grouping-var') {\r\n            tableBody = this.#element.querySelector('.grouping-var__table-body');\r\n            const dep = this.#tableData.depTable.firstElementChild;\r\n            const indep = this.#tableData.indepTable.firstElementChild;\r\n            arrOfIds.push(dep?.dataset.varId);\r\n            arrOfIds.push(indep?.dataset.varId);\r\n            tableBody.innerHTML = createElementsStr();\r\n        }\r\n\r\n        function createElementsStr() {\r\n            let strBody = '';\r\n            vars.forEach(element => {\r\n                const curVarID = element.getID();\r\n                let stringElement = `\r\n                <label title=\"${element.getName()}\" class=\"var-table__item\" data-var-id=${curVarID}>\r\n                    <input type=\"radio\" name=\"data_value\">\r\n                    <img src=${element.getImg()} alt=\"${element.getTypeName()}\" class=\"var-table__img\">\r\n                    <span>${element.getName()}</span>\r\n                </label>`;\r\n\r\n                if (!arrOfIds.includes(curVarID)) {\r\n                    strBody += stringElement;\r\n                }\r\n                strBody += `<div class='var-table__anchor var-table__anchor_${curVarID}'></div>`;\r\n            });\r\n            return strBody;\r\n        }\r\n    }\r\n\r\n    updateSelectedVarsVisual(sheetId) {\r\n        let tableData = this.#tableData.pair;\r\n        let curVars = [...tableData.querySelectorAll('label')];\r\n        curVarsUpdate(curVars);\r\n\r\n        tableData = this.#tableData;\r\n        curVars = [tableData.depTable?.firstElementChild, tableData.indepTable?.firstElementChild];\r\n        curVarsUpdate(curVars);\r\n\r\n\r\n        function curVarsUpdate(curVars) {\r\n            curVars.forEach((el => {\r\n                if (el) {\r\n                    const ids = el.dataset.varId.split('_');\r\n                    if (ids[1] == sheetId) {\r\n                        const v = DataControls.getVarBySheetIdAndVarId(ids[1], ids[2]);\r\n                        const elImg = el.querySelector('img');\r\n                        el.querySelector('span').innerHTML = v.getName();\r\n                        elImg.setAttribute('src', v.getImg());\r\n                        elImg.setAttribute('alt', v.getTypeName());\r\n                    }\r\n                }\r\n            }));\r\n        }\r\n    }\r\n\r\n    clearSelectedVars() {\r\n        this.#tableData.pair.innerHTML = '';\r\n        this.#tableData.depTable.innerHTML = '';\r\n        this.#tableData.indepTable.innerHTML = '';\r\n    }\r\n\r\n    createHTML() {\r\n        const name = 'Гипотеза ' + (this.#id + 1);\r\n        const parametersContainer = UIControls.parametersContainer;\r\n        const resultsContainer = UIControls.resultsContainer;\r\n        const newHyp = document.createElement('div');\r\n        const newRes = document.createElement('div');\r\n        newHyp.classList.add('parameters__item', 'collapsible');\r\n        newRes.classList.add('results__block');\r\n        const htmlParam = `\r\n        <label class=\"collapsible__head\">\r\n            <input class=\"collapsible__input\" type=\"checkbox\" checked>\r\n            <div class=\"parameters__head\">\r\n                <div class=\"parameters__title-container\">\r\n                    <div class=\"collapsible__symbol\"></div>\r\n                    <h2 class=\"parameters__title\">${name}</h2>\r\n                    <input class=\"parameters__title-input\" type='text'>\r\n                </div>\r\n                <div class=\"parameters__extra-container\">\r\n                    <button title=\"Изменить название гипотезы\"\r\n                        class=\"parameters__extra-item parameters__edit-button main-button\"></button>\r\n                    <label title=\"Убрать гипотезу из вычислений\"\r\n                        class=\"parameters__extra-item parameters__hide-button main-button\">\r\n                        <input type=\"checkbox\">\r\n                    </label>\r\n                    <button title=\"Дублировать гипотезу\"\r\n                        class=\"parameters__extra-item parameters__duplicate-button main-button\"></button>\r\n                    <button title=\"Удалить гипотезу\"\r\n                        class=\"parameters__extra-item parameters__delete-button main-button\"></button>\r\n                </div>\r\n            </div>\r\n        </label>\r\n        <div class=\"collapsible__content\">\r\n            <div class=\"parameters__content\">\r\n                <form id=\"module-option-form_${this.#id}\" class=\"module-option-form\" data-id=${this.#id}></form>\r\n                <div class=\"option-block\">\r\n                    <p>Метод проверки: Сравнение независимых выборок</p>\r\n                    <div class=\"option-block__sub\">\r\n                        Тип ввода\r\n                        <div class=\"option-block__list\">\r\n                            <label class=\"radio-line\">\r\n                                <input class=\"main-radio form-change-trigger form-change-trigger_${this.#id} data-input-two\" type=\"radio\" name=\"input-type\" value=\"data-input-two\" form=\"module-option-form_${this.#id}\"\r\n                                    checked>\r\n                                <span>Вычисление по данным (два столбца)</span>\r\n                            </label>\r\n                            <label class=\"radio-line\">\r\n                                <input class=\"main-radio form-change-trigger form-change-trigger_${this.#id} data-input-group\" type=\"radio\" name=\"input-type\" value=\"data-input-group\" form=\"module-option-form_${this.#id}\"\r\n                                    >\r\n                                <span>Вычисление по данным (группировка по переменной)</span>\r\n                            </label>\r\n                            <label class=\"radio-line\">\r\n                                <input class=\"main-radio form-change-trigger form-change-trigger_${this.#id} manual-input-on\" type=\"radio\" name=\"input-type\" value=\"manual\" form=\"module-option-form_${this.#id}\">\r\n                                <span>Ввести величину эффекта</span>\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"option-block__sub option-block__manual-input option-block__student option-block_hidden\">\r\n                        Введите параметры:\r\n                        <div class=\"option-block__list\">\r\n                            <label class=\"input-line\">\r\n                                Средняя разность (d):\r\n                                <input type=\"number\" class=\"main-input main-input_number form-change-trigger form-change-trigger_${this.#id}\" name=\"d\" value=\"1\" step=\"0.1\" min=\"0\" form=\"module-option-form_${this.#id}\">\r\n                            </label>\r\n                            <label class=\"input-line\">\r\n                                Стандартное отклонение (sd):\r\n                                <input type=\"number\" class=\"main-input main-input_number form-change-trigger form-change-trigger_${this.#id}\" name=\"sd\" value=\"1\" step=\"0.1\" min=\"0\" form=\"module-option-form_${this.#id}\">\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"option-block__sub option-block__manual-input option-block__fisher option-block_hidden\">\r\n                        Введите параметры:\r\n                        <div class=\"option-block__list\">\r\n                            <label class=\"input-line\">\r\n                                <span>Вероятность успеха в 1-й выборке (&#961;<sub>1</sub>):</span>\r\n                                <input type=\"number\" class=\"main-input main-input_number form-change-trigger form-change-trigger_${this.#id}\" name=\"p1\" value=\"0.5\" step=\"0.01\" min=\"0\" max=\"1\" form=\"module-option-form_${this.#id}\">\r\n                            </label>\r\n                            <label class=\"input-line\">\r\n                                <span>Вероятность успеха во 2-й выборке (&#961;<sub>2</sub>):</span>\r\n                                <input type=\"number\" class=\"main-input main-input_number form-change-trigger form-change-trigger_${this.#id}\" name=\"p2\" value=\"0.5\" step=\"0.01\" min=\"0\" max=\"1\" form=\"module-option-form_${this.#id}\">\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <div class=\"option-block__tables two-column-var\">\r\n                        <div class=\"var-table\">\r\n                            <div class=\"var-table__header\">\r\n                                <form class=\"sheet-form\" data-type=\"two-column-var\">\r\n                                    <div class=\"main-select\">\r\n                                       <select class=\"main-input two-column-var__sheet-select sheet-select\" name=\"sheet-select\"></select>\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n                            <div class=\"var-table__body two-column-var__table-body\"></div>\r\n                        </div>\r\n                        <div class=\"two-column-var__switch-container\">\r\n                            <div class=\"switch-button switch-button_right\">\r\n                                <div class=\"switch-button__symbol\"></div>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"var-table\">\r\n                            <div class=\"var-table__header\">Сравниваемые переменные</div>\r\n                            <div class=\"var-table__body two-column-var__table-body\">\r\n                                <div class=\"two-column-var__item target-table-data\">\r\n                                </div>\r\n                                <div class=\"two-column-var__delimiter\"></div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                    <div class=\"option-block__tables grouping-var option-block_hidden\">\r\n                        <div class=\"var-table\">\r\n                            <div class=\"var-table__header\">\r\n                                <form class=\"sheet-form\" data-type=\"grouping-var\">\r\n                                    <div class=\"main-select\">\r\n                                        <select class=\"main-input grouping-var__sheet-select sheet-select\"\r\n                                            name=\"sheet-select\"></select>\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n                            <div class=\"var-table__body grouping-var__table-body\">\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"grouping-var__tables-and-switches\">\r\n                            <div class=\"grouping-var__container\">\r\n                                <div class=\"grouping-var__switch-container\">\r\n                                    <div class=\"switch-button switch-button_right\">\r\n                                        <div class=\"switch-button__symbol\"></div>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"var-table\">\r\n                                    <div class=\"var-table__header\">Зависимая переменная</div>\r\n                                    <div class=\"var-table__body grouping-var__dependent-table-body\">\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"grouping-var__container\">\r\n                                <div class=\"grouping-var__switch-container\">\r\n                                    <div class=\"switch-button switch-button_right\">\r\n                                        <div class=\"switch-button__symbol\"></div>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"var-table\">\r\n                                    <div class=\"var-table__header\">Группировка по переменной</div>\r\n                                    <div class=\"var-table__body grouping-var__independent-table-body\">\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"option-block__two-column\">\r\n                        <div class=\"option-block\">\r\n                            <div class=\"option-block__sub\">\r\n                                Тест\r\n                                <div class=\"option-block__list option-block__test-type\">\r\n                                    <label class=\"radio-line\">\r\n                                        <input class=\"main-radio form-change-trigger form-change-trigger_${this.#id}\" type=\"radio\"\r\n                                            name=\"test-type\" value=\"fisher\"\r\n                                            form=\"module-option-form_${this.#id}\" checked>\r\n                                        <span>Точный тест Фишера</span>\r\n                                    </label>\r\n                                    <label class=\"radio-line\">\r\n                                        <input class=\"main-radio form-change-trigger form-change-trigger_${this.#id}\" type=\"radio\"\r\n                                            name=\"test-type\" value=\"mann\"\r\n                                            form=\"module-option-form_${this.#id}\">\r\n                                        <span>Манна-Уитни</span>\r\n                                    </label>\r\n                                    <label class=\"radio-line\">\r\n                                        <input class=\"main-radio form-change-trigger form-change-trigger_${this.#id}\" type=\"radio\"\r\n                                            name=\"test-type\" value=\"student\"\r\n                                            form=\"module-option-form_${this.#id}\">\r\n                                        <span>Стьюдента</span>\r\n                                    </label>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"option-block\">\r\n                            <div class=\"option-block__sub\">\r\n                                Проверка альтернативной гипотезы\r\n                                <div class=\"option-block__list\">\r\n                                    <label class=\"radio-line\">\r\n                                        <input class=\"main-radio form-change-trigger form-change-trigger_${this.#id}\" type=\"radio\"\r\n                                            name=\"hyp-check\" value=\"both\"\r\n                                            form=\"module-option-form_${this.#id}\" checked>\r\n                                        <span>Двусторонняя (M1 ≠ M2)</span>\r\n                                    </label>\r\n                                    <label class=\"radio-line\">\r\n                                        <input class=\"main-radio form-change-trigger form-change-trigger_${this.#id}\" type=\"radio\"\r\n                                            name=\"hyp-check\" value=\"right\"\r\n                                            form=\"module-option-form_${this.#id}\">\r\n                                        <span>Правосторонняя (M2 &#62; M1)</span>\r\n                                    </label>\r\n                                    <label class=\"radio-line\">\r\n                                        <input class=\"main-radio form-change-trigger form-change-trigger_${this.#id}\" type=\"radio\"\r\n                                            name=\"hyp-check\" value=\"left\"\r\n                                            form=\"module-option-form_${this.#id}\">\r\n                                        <span>Левосторонняя (M2 &#60; M1)</span>\r\n                                    </label>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>`;\r\n        newHyp.innerHTML = htmlParam;\r\n        this.#setElements(newHyp, newRes);\r\n        this.#hypName = name;\r\n        parametersContainer.appendChild(newHyp);\r\n        resultsContainer.appendChild(newRes);\r\n    }\r\n\r\n    #setElements(newHyp, newRes) {\r\n        this.#element = newHyp;\r\n        this.#form = newHyp.querySelector('.module-option-form');\r\n        this.#formSheets = [...newHyp.querySelectorAll('.sheet-form')];\r\n        this.#sheetSelects = [...newHyp.querySelectorAll('.sheet-select')];\r\n        this.#tableData.pair = newHyp.querySelector('.target-table-data');\r\n        this.#tableData.indepTable = newHyp.querySelector('.grouping-var__independent-table-body');\r\n        this.#tableData.depTable = newHyp.querySelector('.grouping-var__dependent-table-body');\r\n        this.#resultBlock = newRes;\r\n    }\r\n\r\n    setSettings() {\r\n        const formData = new FormData(this.#form);\r\n        this.#testType = formData.get('test-type');\r\n        this.#altHypTest = formData.get('hyp-check');\r\n        this.#inputType = formData.get('input-type');\r\n\r\n        switch (this.#testType) {\r\n            case 'student': {\r\n                if (this.#inputType === 'manual') {\r\n                    this.#resultsTableData.student.d = Number(formData.get('d'));\r\n                    this.#resultsTableData.student.sd = Number(formData.get('sd'));\r\n                }\r\n                else {\r\n                    this.#resultsTableData.student.d = null;\r\n                    this.#resultsTableData.student.sd = null;\r\n                }\r\n                break;\r\n            }\r\n            case 'fisher': {\r\n                if (this.#inputType === 'manual') {\r\n                    this.#resultsTableData.fisher.p1 = Number(formData.get('p1'));\r\n                    this.#resultsTableData.fisher.p2 = Number(formData.get('p2'));\r\n                }\r\n                else {\r\n                    this.#resultsTableData.fisher.p1 = null;\r\n                    this.#resultsTableData.fisher.p2 = null;\r\n                }\r\n                this.#resultsTableData.fisher.p0 = null;\r\n                break;\r\n            }\r\n        }\r\n        this.#resultsTableData.z = null;\r\n\r\n        const data = [];\r\n        this.#data.first = null;\r\n        this.#data.second = null;\r\n        const vars = [];\r\n        this.#vars.first = null;\r\n        this.#vars.second = null;\r\n\r\n        if (this.#inputType !== 'manual') {\r\n\r\n            const tableData = this.#tableData;\r\n            const dep = tableData.depTable.firstElementChild;\r\n            const indep = tableData.indepTable.firstElementChild;\r\n            let selectedVars;\r\n            let validTableData;\r\n\r\n            if (this.#inputType === 'data-input-two') {\r\n                selectedVars = [...tableData.pair.children];\r\n                validTableData = (selectedVars.length === 2);\r\n            }\r\n            else {\r\n                selectedVars = [dep, indep];\r\n                validTableData = (dep && indep);\r\n            }\r\n\r\n            if (validTableData) {\r\n                selectedVars.forEach(el => {\r\n                    const ids = el.dataset.varId.split('_');\r\n                    data.push(DataControls.getDataBySheetAndVarId(ids[1], ids[2]).slice(1));\r\n                    vars.push(DataControls.getVarBySheetIdAndVarId(ids[1], ids[2]));\r\n                });\r\n                this.#data.first = data[0];\r\n                this.#data.second = data[1];\r\n                this.#vars.first = vars[0];\r\n                this.#vars.second = vars[1];\r\n            }\r\n        }\r\n    }\r\n\r\n    getN(alpha, power) {\r\n        if (!alpha || Number.isNaN(alpha) || typeof alpha !== 'number') {\r\n            return null;\r\n        }\r\n        if (!power || Number.isNaN(power) || typeof power !== 'number') {\r\n            return;\r\n        }\r\n        return this.#testChoose(false, alpha, power);\r\n    }\r\n\r\n    setStatPower(alpha, sampleSize) {\r\n        if (!alpha || Number.isNaN(alpha) || typeof alpha !== 'number') {\r\n            return null;\r\n        }\r\n        if (!sampleSize || Number.isNaN(sampleSize) || typeof sampleSize !== 'number') {\r\n            return;\r\n        }\r\n        this.#power = this.#testChoose(true, alpha, sampleSize);\r\n    }\r\n\r\n    #testChoose(isInv, alpha, arg) {\r\n\r\n        let firstVarName, secondVarName;\r\n        let errorElement;\r\n        let data1 = [], data2 = [];\r\n\r\n        if (this.#inputType !== 'manual') {\r\n\r\n            if (!this.#data.first || !this.#data.second) {\r\n                return;\r\n            }\r\n\r\n            firstVarName = this.#vars.first.getTypeName();\r\n            secondVarName = this.#vars.second.getTypeName();\r\n\r\n            if (this.#inputType === 'data-input-two') {\r\n                errorElement = this.#tableData.pair;\r\n\r\n                if (firstVarName !== secondVarName) {\r\n                    UIControls.showError(errorElement, 'Нельзя сравнить данные разного типа');\r\n                    return;\r\n                }\r\n\r\n                data1 = [...this.#data.first];\r\n                data2 = [...this.#data.second];\r\n            }\r\n            else {\r\n                errorElement = this.#tableData.indepTable;\r\n\r\n                if (secondVarName !== Var.Binary.name) {\r\n                    UIControls.showError(errorElement, 'Переменная для группировки должна быть дихотомического типа');\r\n                    return;\r\n                }\r\n                if (this.#data.first.length !== this.#data.second.length) {\r\n                    UIControls.showError(errorElement, 'Размеры данных зависимой переменной и переменной для группировки должны совпадать');\r\n                    return;\r\n                }\r\n\r\n                const indepVar = this.#vars.second;\r\n                this.#data.first.forEach((el, ind) => {\r\n                    const group = indepVar.isValInZeroGroup(this.#data.second[ind]);\r\n                    if (group === 0) {\r\n                        data1.push(el);\r\n                    }\r\n                    else if (group === 1) {\r\n                        data2.push(el);\r\n                    }\r\n                    else {\r\n                        UIControls.showError(errorElement, 'Ошибка вычисления');\r\n                        return;\r\n                    }\r\n                });\r\n            }\r\n\r\n            if (data1.length === 0 || data2.length === 0) {\r\n                UIControls.showError(errorElement, 'Присутствует пустая выборка, невозможно провести вычисления');\r\n                return;\r\n            }\r\n        }\r\n        else {\r\n            errorElement = this.#element;\r\n        }\r\n\r\n        let returnValue;\r\n        try {\r\n            switch (this.#testType) {\r\n                case 'student': {\r\n                    if (this.#inputType !== 'manual' && firstVarName !== Var.Continues.name) {\r\n                        throw new Error(errorText([Var.Continues.ruName]));\r\n                    }\r\n                    if (isInv) {\r\n                        returnValue = this.#studentTestInv(alpha, arg, data1, data2);\r\n                    }\r\n                    else {\r\n                        returnValue = this.#studentTest(alpha, arg, data1, data2);\r\n                    }\r\n                    break;\r\n                }\r\n                case 'fisher': {\r\n                    if (this.#inputType !== 'manual' && firstVarName !== Var.Binary.name) {\r\n                        throw new Error(errorText([Var.Binary.ruName]));\r\n                    }\r\n                    if (isInv) {\r\n                        returnValue = this.#fisherTestInv(alpha, arg, data1, data2);\r\n                    }\r\n                    else {\r\n                        returnValue = this.#fisherTest(alpha, arg, data1, data2);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        catch (err) {\r\n            UIControls.showError(errorElement, err.message);\r\n            return;\r\n        }\r\n\r\n        return returnValue;\r\n\r\n        function errorText(varTypeNameArray) {\r\n            return `Выбранный тест поддерживает следующий тип данных: ${varTypeNameArray.join(', ')}`;\r\n        }\r\n    }\r\n\r\n    #studentTest(alpha, power, data1, data2) {\r\n\r\n    }\r\n\r\n    #studentTestInv(alpha, n) {\r\n\r\n    }\r\n\r\n    #fisherTest(alpha, power, data1, data2) {\r\n        let p0, p1, p2;\r\n        const zAlpha = this.getZAlpha(this.#altHypTest, alpha);\r\n        const z = this.getZ(zAlpha, power);\r\n        if (this.#inputType === 'manual') {\r\n            p1 = this.#resultsTableData.fisher.p1;\r\n            p2 = this.#resultsTableData.fisher.p2;\r\n        }\r\n        else {\r\n            const var1 = this.#vars.first;\r\n            const var2 = this.#inputType === 'data-input-two' ? this.#vars.second : var1;\r\n            const signs = this.#fisherTestGetListOfNumberOfSigns(data1, data2, var1, var2);\r\n            p1 = signs[0] / data1.length;\r\n            p2 = signs[1] / data2.length;\r\n        }\r\n\r\n        p0 = (p1 + p2) / 2;\r\n\r\n        this.#resultsTableData.z = z;\r\n        this.#resultsTableData.fisher.p0 = p0;\r\n        this.#resultsTableData.fisher.p1 = p1;\r\n        this.#resultsTableData.fisher.p2 = p2;\r\n\r\n        const n = z ** 2 * p0 * (1 - p0) / (2 * (p1 - p0) ** 2);\r\n\r\n        const N = Math.ceil(n) * 2;\r\n\r\n        if (n === undefined || typeof n !== 'number') {\r\n            throw new Error('Ошибка расчета данных');\r\n        }\r\n\r\n        return N;\r\n    }\r\n\r\n    #fisherTestInv(alpha, n, data1, data2) {\r\n        let p0, p1, p2;\r\n        const zAlpha = this.getZAlpha(this.#altHypTest, alpha);\r\n\r\n        if (this.#inputType === 'manual') {\r\n            p1 = this.#resultsTableData.fisher.p1;\r\n            p2 = this.#resultsTableData.fisher.p2;\r\n        }\r\n        else {\r\n            const var1 = this.#vars.first;\r\n            const var2 = this.#inputType === 'data-input-two' ? this.#vars.second : var1;\r\n            const signs = this.#fisherTestGetListOfNumberOfSigns(data1, data2, var1, var2);\r\n            p1 = signs[0] / data1.length;\r\n            p2 = signs[1] / data2.length;\r\n        }\r\n        p0 = (p1 + p2) / 2;\r\n\r\n        this.#resultsTableData.fisher.p0 = p0;\r\n        this.#resultsTableData.fisher.p1 = p1;\r\n        this.#resultsTableData.fisher.p2 = p2;\r\n\r\n        let z = Math.sqrt((2 * n * (p1 - p0) ** 2) / (2 * p0 * (1 - p0)));\r\n        if (z > 0) {\r\n            z *= -1;\r\n        }\r\n        this.#resultsTableData.z = z;\r\n        const zB = z - zAlpha;\r\n        const power = 100 - Math.normdist(zB);\r\n\r\n        if (power === undefined || typeof power !== 'number') {\r\n            throw new Error('Ошибка расчета данных');\r\n        }\r\n\r\n        return power;\r\n    }\r\n\r\n    // returns list of number of elements in 1-st group (counting from 0) in data1 and data2\r\n    #fisherTestGetListOfNumberOfSigns(data1, data2, var1, var2) {\r\n        const list = [0, 0];\r\n        let firstDataColumn;\r\n        let secondDataColumn;\r\n\r\n        firstDataColumn = getColumnOfAdaptedVals(data1, var1);\r\n        secondDataColumn = getColumnOfAdaptedVals(data2, var2);\r\n\r\n        countItemsInFirstGroup(firstDataColumn, 0);\r\n        countItemsInFirstGroup(secondDataColumn, 1);\r\n\r\n        return list;\r\n\r\n        function countItemsInFirstGroup(dataColumn, listIndexToPut) {\r\n            dataColumn.forEach(el => {\r\n                if (el === 1)\r\n                    list[listIndexToPut]++;\r\n            });\r\n        }\r\n\r\n        function getColumnOfAdaptedVals(data, curVar) {\r\n            return data.map(el => {\r\n                if (el === '')\r\n                    throw new Error('Невозможно обработать набор данных, имеются пропущенные значения');\r\n                const group = curVar.isValInZeroGroup(el);\r\n                if (group === -1)\r\n                    throw new Error('Ошибка вычислений');\r\n                else {\r\n                    return group;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    updateResultsHtml(isMain) {\r\n        const name = this.#hypName;\r\n        const powerString = isMain ? `<p><b>Основная гипотеза</b></p>` : `<p>Статистическая мощность: ${Number.resultForm(this.#power)}%</p>`;\r\n        let table;\r\n        let inputTypeHeader;\r\n        if (this.#inputType === 'manual') {\r\n            inputTypeHeader = `\r\n            <th>\r\n            </th>\r\n            <th>\r\n            </th>`;\r\n        }\r\n        else if (this.#inputType === 'data-input-two') {\r\n            inputTypeHeader = `\r\n            <th>\r\n                Выборка 1\r\n            </th>\r\n            <th>\r\n                Выборка 2\r\n            </th>`;\r\n        }\r\n        else {\r\n            inputTypeHeader = `\r\n            <th>\r\n                Зависимая переменная\r\n            </th>\r\n            <th>\r\n                Переменная для группировки\r\n            </th>`;\r\n        }\r\n        if (this.#testType === 'student') {\r\n            table = `<thead>\r\n                        <tr>\r\n                            ${inputTypeHeader}\r\n                            <th>\r\n                                d mean\r\n                            </th>\r\n                            <th>\r\n                                sd\r\n                            </th>\r\n                            <th>\r\n                                z\r\n                            </th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>\r\n                                ${String.resultForm(this.#vars.first?.getName())}\r\n                            </td>\r\n                            <td>\r\n                                ${String.resultForm(this.#vars.second?.getName())}\r\n                            </td>\r\n                            <td>\r\n                                ${Number.resultForm(this.#resultsTableData.student.d)}\r\n                            </td>\r\n                            <td>\r\n                                ${Number.resultForm(this.#resultsTableData.student.sd)}\r\n                            </td>\r\n                            <td>\r\n                                ${Number.resultForm(this.#resultsTableData.z)}\r\n                            </td>\r\n                        </tr >\r\n                    </tbody >`;\r\n        }\r\n        else if (this.#testType === 'fisher') {\r\n            table = `<thead>\r\n                        <tr>\r\n                            ${inputTypeHeader}\r\n                            <th>\r\n                                &#961;<sub>0</sub>\r\n                            </th>\r\n                            <th>\r\n                                &#961;<sub>1</sub>\r\n                            </th>\r\n                            <th>\r\n                                &#961;<sub>2</sub>\r\n                            </th>\r\n                            <th>\r\n                                z\r\n                            </th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>\r\n                                ${String.resultForm(this.#vars.first?.getName())}\r\n                            </td>\r\n                            <td>\r\n                                ${String.resultForm(this.#vars.second?.getName())}\r\n                            </td>\r\n                            <td>\r\n                                ${Number.resultForm(this.#resultsTableData.fisher.p0)}\r\n                            </td>\r\n                            <td>\r\n                                ${Number.resultForm(this.#resultsTableData.fisher.p1)}\r\n                            </td>\r\n                            <td>\r\n                                ${Number.resultForm(this.#resultsTableData.fisher.p2)}\r\n                            </td>\r\n                            <td>\r\n                                ${Number.resultForm(this.#resultsTableData.z)}\r\n                            </td>\r\n                        </tr >\r\n                    </tbody >`;\r\n        }\r\n        const htmlRes = `\r\n        <h2 class=\"results__header\">${name}</h2>\r\n        <div class=\"results__block-inner\">\r\n            ${powerString}\r\n            <p>Сравнение независимых выборок</p>\r\n            <p>${Module.testText[this.#testType]}</p>\r\n            ${Module.altHypText[this.#altHypTest]}\r\n            <table class=\"results__table\">\r\n                <caption><small>${this.#inputType === 'manual' ? 'Данные введены вручную' : ''}</small>\r\n                </caption>\r\n                ${table}\r\n            </table >\r\n        </div > `;\r\n\r\n        this.#resultBlock.innerHTML = htmlRes;\r\n    }\r\n\r\n    changeVisibilityResultsHtml(hide) {\r\n        this.#resultBlock.style.display = hide ? 'none' : '';\r\n    }\r\n}"],"names":[],"sourceRoot":""}